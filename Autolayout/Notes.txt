NOTES

Autolayout great for handling labels - automatically truncating them and adjusting containing views sizes…



- Slide 1 (UILabels)

* UILabels take up minimum required space
* Set up constraints so a superview expands depending on its content (labels in this case)

Labels width = 200
Top label has higher priority
Bottom label limited to 2 lines

Green view present because of padding between labels (which are 0 height at beginning)



- Slide 2 (Compression resistance)

* Control priorities of labels using compression resistance



- Slide 3 (Content hugging)

* Mostly only adjust this when compiler complains about ambiguity
* Need to tell it which label will expand so it can work out sizes
* Give the label you want to expand first a lower hugging priority should sort it out

Blue label - content hugging priority > leading/trailing constraints
Red label is the opposite


- Slide 4 (Floating below multiple items) DELETE ???

* Add constraints from purple view to both labels with lower priority (999) so compiler doesn’t complain when it has to break 1
* Labels constrained to each other with red label having higher horizontal resistance so blue compresses first


- Slide 5 (Collection views)

* Dynamic cell sizes achieved using prototype cells
* Create one cell in memory - the prototype
* In size method, set a width or height constraint and fill it with the content for the appropriate index
* Use auto layout to calculate the appropriate size using systemLayoutSizeFittingSize
* PORTRAIT - We’ve set the width constraint and allowed the label to fill the cell, determining its height
* LANDSCAPE - Set a height constraint and now the width is determined by the label


- Slide 6 (Programmatically editing constraints)

* Programatically add constraints using the visual formatting language
* Hitting “Do it!” will pin the red view to the blue view - making it expand to fill whatever size it is
* Can also set priorities, widths, heights etc…
* Our general use case is adding nibs as subviews which automatically expand to fill their superviews
* Show UIView+ALAutoLayout category
* MUST HAVE translatesAutoresizingMaskIntoConstraints = NO to work!!!

* Can have NSLayoutConstraints as IBOutlets. 
* This means we can then grab a handle on the constraints set up in the storyboard/nibs and edit their constants
* Its not possible to edit priorities at the moment - not sure why as this would be very handy
* Instead we’ve had to remove constraints and re-add them




TODO
* Show label with bottom pinned to bottom rather than >=
* Mention Editor -> Pin to superview for edges to ignore margins, top layout accounts for status bar (and nav bar if present)
Animate transitions
Other visual format examples